/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.iteku.informes;

import com.iteku.backofficefichajes.Config;
import com.iteku.basedatos.GestionProfesoresBD;
import com.iteku.beans.ProfesorBean;
import com.iteku.recuento.Contabilizar;
import com.iteku.utils.FechasUtils;
import com.itextpdf.text.DocumentException;
import java.awt.Window;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.Collator;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author vPalomo
 */
public class ListaProfesoresInforme extends javax.swing.JPanel {

    private ArrayList<ProfesorBean> listaProfesores;
    private float totalContabilizaciones;
    private float barraProgreso = 0;
    private JPanel panelCompleto;

    /**
     * Creates new form ListaProfesoresInforme
     */
    public ListaProfesoresInforme() {
        JPanel panelCompleto = this;
        initComponents();
        cargarListaProfesores();
        comboValorDefault();
    }

    private void comboValorDefault() {
        String mes = FechasUtils.dameMesFechaActual();
        jComboMes.setSelectedIndex(Integer.parseInt(mes));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTableProfesores = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jComboMes = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jButtonInformeMes = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jButton1 = new javax.swing.JButton();
        jButtonInformeCurso = new javax.swing.JButton();

        jTableProfesores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Id Prof", "Nombre C.", "Nombre", "Apellidos", "Ult. GeneraciÃ³n"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableProfesores.setMinimumSize(new java.awt.Dimension(90, 320));
        jScrollPane2.setViewportView(jTableProfesores);
        if (jTableProfesores.getColumnModel().getColumnCount() > 0) {
            jTableProfesores.getColumnModel().getColumn(0).setPreferredWidth(30);
            jTableProfesores.getColumnModel().getColumn(1).setPreferredWidth(30);
            jTableProfesores.getColumnModel().getColumn(2).setPreferredWidth(150);
            jTableProfesores.getColumnModel().getColumn(3).setPreferredWidth(150);
            jTableProfesores.getColumnModel().getColumn(4).setPreferredWidth(300);
            jTableProfesores.getColumnModel().getColumn(5).setPreferredWidth(250);
        }

        jLabel1.setText("1. Selecciones los profesores de los que quiere generar el informe");

        jButton6.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton6.setText("Seleccionar todo");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton7.setText("Borrar todo");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel2.setText("2. Selecciones el mes que quiera generar");

        jComboMes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos", "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre" }));
        jComboMes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboMesActionPerformed(evt);
            }
        });

        jLabel3.setText("3. Pulse en Generar");

        jButtonInformeMes.setText("Generar informes mensual");
        jButtonInformeMes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInformeMesActionPerformed(evt);
            }
        });

        jButton2.setText("Abrir carpeta de infomes");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setText("Salir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButtonInformeCurso.setText("Generar recuento del curso");
        jButtonInformeCurso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInformeCursoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(211, 211, 211)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(79, 79, 79)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton7)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jComboMes, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonInformeMes)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonInformeCurso))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(115, 115, 115)
                                .addComponent(jLabel3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 783, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(jButton7))
                .addGap(310, 310, 310)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonInformeMes)
                            .addComponent(jComboMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonInformeCurso))
                        .addGap(11, 11, 11)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(15, 15, 15)
                        .addComponent(jButton1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(57, 57, 57)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(87, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        DefaultTableModel datosTabla = (DefaultTableModel) jTableProfesores.getModel();
        for (int i = 0; i < datosTabla.getRowCount(); i++) {
            datosTabla.setValueAt(true, i, 0);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        DefaultTableModel datosTabla = (DefaultTableModel) jTableProfesores.getModel();
        for (int i = 0; i < datosTabla.getRowCount(); i++) {
            datosTabla.setValueAt(false, i, 0);
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jComboMesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboMesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboMesActionPerformed

    private void jButtonInformeMesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInformeMesActionPerformed
        jButtonInformeMes.setEnabled(false);
        jButtonInformeCurso.setEnabled(false);
        try {
            int mes = Integer.parseInt(FechasUtils.getNumMes(jComboMes.getItemAt(jComboMes.getSelectedIndex())));

            DefaultTableModel datosTabla = (DefaultTableModel) jTableProfesores.getModel();
            ArrayList<ProfesorBean> listaProfesores2 = new ArrayList<>();
            for (int i = 0; i < datosTabla.getRowCount(); i++) {
                ProfesorBean profesor = new ProfesorBean();
                profesor.setIdProfesor((int) datosTabla.getValueAt(i, 1));
                boolean sel = (boolean) datosTabla.getValueAt(i, 0);
                if (sel) {
                    listaProfesores2.add(profesor);
                }
            }
            contabiliza(listaProfesores2, mes);
        } catch (Exception ex) {
            Logger.getLogger(ListaProfesoresInforme.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonInformeMesActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Window w = SwingUtilities.getWindowAncestor(this);
        w.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            System.out.println("explorer.exe /select, "+System.getProperty("user.dir")+"\\informes\\");
            Runtime.getRuntime().exec("explorer.exe /open, "+System.getProperty("user.dir")+"\\informes\\");
        } catch (IOException ex) {
            Logger.getLogger(ListaProfesoresInforme.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButtonInformeCursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInformeCursoActionPerformed
        JOptionPane.showMessageDialog(null, "Se van a generar los informes con los datos que ya se tienen calculados.\nPara volver a calcular algÃºn datos debe primero generar el informe mensual\nque quiera recalcular.");
        try {
            DefaultTableModel datosTabla = (DefaultTableModel) jTableProfesores.getModel();
            ArrayList<ProfesorBean> listaProfesores2 = new ArrayList<>();
            for (int i = 0; i < datosTabla.getRowCount(); i++) {
                ProfesorBean profesor = new ProfesorBean();
                profesor.setIdProfesor((int) datosTabla.getValueAt(i, 1));
                boolean sel = (boolean) datosTabla.getValueAt(i, 0);
                if (sel) {
                    listaProfesores2.add(profesor);
                }
            }
            contabilizaAnual(listaProfesores2);
        } catch (Exception ex) {
            Logger.getLogger(ListaProfesoresInforme.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonInformeCursoActionPerformed

    private void cargarListaProfesores() {
        listaProfesores = GestionProfesoresBD.getListaProfesores(true);
        listaProfesores.sort(new Comparator<ProfesorBean>(){
            @Override
            public int compare(ProfesorBean p1, ProfesorBean p2) {
                Collator c = Collator.getInstance(new Locale("es"));
                c.setStrength(Collator.PRIMARY);
                return c.compare(p1.getApellidos(), p2.getApellidos());
                //return p1.getApellidos().compareToIgnoreCase(p2.getApellidos());
            }
        });
        DefaultTableModel datosTabla = (DefaultTableModel) jTableProfesores.getModel();
        for (int i = datosTabla.getRowCount(); i > 0; i--) {
            datosTabla.removeRow(i - 1);
        }
        for (ProfesorBean profesor : listaProfesores) {
            datosTabla.addRow(new Object[]{
                true,
                profesor.getIdProfesor(),
                profesor.getNombreCorto(),
                profesor.getNombre(),
                profesor.getApellidos(),
                FechasUtils.fechaYHora(profesor.getFechaUltimoInforme(), "/")
            });
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButtonInformeCurso;
    private javax.swing.JButton jButtonInformeMes;
    private javax.swing.JComboBox<String> jComboMes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableProfesores;
    // End of variables declaration//GEN-END:variables

    
    private void hiloContabiliza(ArrayList<ProfesorBean> listaProfesores2, int mes) {
        Contabilizar conta = new Contabilizar();
        System.out.println("Total contabilizaciones: "+totalContabilizaciones);
        for (ProfesorBean profesor : listaProfesores2) {
            System.out.println("Barra progreso: "+barraProgreso);
            barraProgreso += 1 / (totalContabilizaciones / 100);
            jProgressBar1.setValue((int) barraProgreso);
            //jProgressBar1.repaint();
            conta.contabilizarConMesYProfesor(profesor, mes);
            ImpresionInforme pdf = new ImpresionInforme(profesor, mes);
            try {
                pdf.generarDocuementoMes();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(ListaProfesoresInforme.class.getName()).log(Level.SEVERE, null, ex);
            } catch (DocumentException ex) {
                Logger.getLogger(ListaProfesoresInforme.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * Lanza un hilo que se encarga de contabilizar 
     * @param listaProfesores2
     * @param mes
     * @throws FileNotFoundException
     * @throws DocumentException 
     */
    private void contabiliza(ArrayList<ProfesorBean> listaProfesores2, int mes) throws FileNotFoundException, DocumentException {
        Runnable miRunnable = new Runnable() {
            @Override
            public void run() {
                System.out.println("Comienza el hilo");
                if (mes != 0) {
                    totalContabilizaciones = listaProfesores2.size();
                    hiloContabiliza(listaProfesores2, mes);
                } else {
                    totalContabilizaciones = Config.getArrayMes().length * listaProfesores2.size();
                    for (int i = 0; i < Config.getArrayMes().length; i++) {
                        hiloContabiliza(listaProfesores2, Config.getArrayMes()[i]);
                    }
                }
                System.out.println("Fin del hilo");
                JOptionPane.showMessageDialog(null, "Generacion completada");
                jButtonInformeMes.setEnabled(true);
                jButtonInformeCurso.setEnabled(true);
                jProgressBar1.setValue(0);
                totalContabilizaciones=0;
                barraProgreso=0;
            }
        };
        Thread hilo = new Thread (miRunnable);
        hilo.start();
    }
    
    private void contabilizaAnual(ArrayList<ProfesorBean> listaProfesores2) throws FileNotFoundException, DocumentException {
        Runnable miRunnable = new Runnable() {
            @Override
            public void run() {
                System.out.println("Comienza el hilo de contabilizacion anual");
                    totalContabilizaciones = listaProfesores2.size();
                    //for (int i = 0; i < Config.arrayMes.length; i++) {
                        hiloContabilizaAnual(listaProfesores2);
                    //}
                System.out.println("Fin del hilo anual");
                JOptionPane.showMessageDialog(null, "Generacion completada");
                jButtonInformeMes.setEnabled(true);
                jProgressBar1.setValue(0);
                totalContabilizaciones=0;
                barraProgreso=0;
            }
        };
        Thread hilo = new Thread (miRunnable);
        hilo.start();
    }
    
    private void hiloContabilizaAnual(ArrayList<ProfesorBean> listaProfesores2) {
        Contabilizar conta = new Contabilizar();
        System.out.println("Total contabilizaciones: "+totalContabilizaciones);
        for (ProfesorBean profesor : listaProfesores2) {
            System.out.println("Barra progreso: "+barraProgreso);
            barraProgreso += 1 / (totalContabilizaciones / 100);
            jProgressBar1.setValue((int) barraProgreso);
            ImpresionInforme pdf = new ImpresionInforme(profesor);
            try {
                pdf.generarDocuementoCurso();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(ListaProfesoresInforme.class.getName()).log(Level.SEVERE, null, ex);
            } catch (DocumentException ex) {
                Logger.getLogger(ListaProfesoresInforme.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}
